<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 用注解的方式，扫描 -->
	<context:component-scan base-package="xymz.service,xymz.dao,xymz.action" />
	
	<!-- 引入数据库连接信息的配置文件 -->
 	<context:property-placeholder location="classpath:db.properties"/>  
	<!-- 配置数据库连接信息 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	<property name="driverClass" value="${driverClass}" />
		<property name="jdbcUrl" value="${jdbcUrl}" />
		<property name="user" value="${user}" />
		<property name="password" value="${password}" />
	</bean>

	<!-- 添加SessionFactory,通过Spring来管理Session LocalSessionFactoryBean 由于实现FactoryBean<SessionFactory>接口,所以返回的就是SessionFactory类型 
		此类,代替了没有整合之前 HibernateSessionFactory， -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
	</bean>

	<!-- 配置事物管理器,需要以来sessionFactory,所有的session都是从sessionFactory创建,就可以控制session的事物 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>


	<!-- 配置 事务的传播特性 tx: 是被Spring封装的事务模版风格,也就是说,直接使用tx 代替了Spring AOP事务 -->
	<!-- 配置哪些"方法"需要什么样的事务 -->
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- REQUIRED: 必须要有事务,没有就创建一个新事务 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<!-- SUPPORTS: 支持事务,如果有就加入到当前事务,没有就没有,不会创建 -->
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置AOP, 配置切面表达式 -->
	<aop:config>
		<!-- 配置切入表达式 -->
		<aop:pointcut expression="execution(* xymz.*.impl.*.*(..))" id="pointcut"/>
		<!-- 让,pointcut与 tx 合二为一,则可以确定 具体包的类的方法,切入事务 -->
		<aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>
	</aop:config>
</beans>
